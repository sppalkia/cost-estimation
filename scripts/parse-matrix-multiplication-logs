#!/usr/bin/env python
import argparse

"""Parses the raw logs produced by the ./test.sh script in this directory,
   and produces a Gnuplot input data file that can be subsequently fed into
   the `../plot-graph` script to produce a plot of the data"""

def main(inputFile, outputFile):
  # First, read the raw log from the ./test.sh script and parse out
  # times and input parameters
  blockedTimes = dict()
  unblockedTimes = dict()
  transposedTimes = dict()

  ns = set()
  blockSizes = set()
  with open(inputFile, 'r') as f:
    n, blockSize = None, None
    for line in f:
      if "n=" in line and "block_size=" in line:
        [nStr, blockSizeStr] = line.split(", ")
        n = int(nStr.split("=")[1])
        blockSize = float(blockSizeStr.split("=")[1])
        ns.add(n)
        blockSizes.add(blockSize)

        if blockSize not in blockedTimes: blockedTimes[blockSize] = dict()
        if blockSize not in unblockedTimes: unblockedTimes[blockSize] = dict()
        if blockSize not in transposedTimes: transposedTimes[blockSize] = dict()
        if n not in blockedTimes[blockSize]: blockedTimes[blockSize][n] = []
        if n not in unblockedTimes[blockSize]: unblockedTimes[blockSize][n] = []
        if n not in transposedTimes[blockSize]: transposedTimes[blockSize][n] = []
      elif "Blocked" in line:
        time = float(line.split()[1])
        blockedTimes[blockSize][n].append(time)
      elif "Unblocked" in line:
        time = float(line.split()[1])
        unblockedTimes[blockSize][n].append(time)
      elif "Transposed" in line:
        time = float(line.split()[1])
        transposedTimes[blockSize][n].append(time)

  # Normalize all the data.
  maximum = 0.0
  for k in unblockedTimes:
      for n in unblockedTimes[k]:
          unblockedTimes[k][n] = [sum(unblockedTimes[k][n]) / len(unblockedTimes[k][n])]
          maximum = max(maximum, unblockedTimes[k][n][0])
  for k in blockedTimes:
      for n in blockedTimes[k]:
          blockedTimes[k][n] = [sum(blockedTimes[k][n]) / len(blockedTimes[k][n])]
          maximum = max(maximum, blockedTimes[k][n][0])
  for k in blockedTimes:
      for n in transposedTimes[k]:
          transposedTimes[k][n] = [sum(transposedTimes[k][n]) / len(transposedTimes[k][n])]
          maximum = max(maximum, transposedTimes[k][n][0])

  for k in unblockedTimes:
      for n in unblockedTimes[k]:
          unblockedTimes[k][n] = [x / float(maximum) for x in unblockedTimes[k][n]]
  for k in blockedTimes:
      for n in blockedTimes[k]:
          blockedTimes[k][n] = [x / float(maximum) for x in blockedTimes[k][n]]
  for k in transposedTimes:
      for n in transposedTimes[k]:
          transposedTimes[k][n] = [x / float(maximum) for x in transposedTimes[k][n]]

  # Now, write out parsed data in the format expected by Gnuplot:
  #
  # #	<Col1 Name>	<Col2 Name> ...
  # RowValue ColValue1 ColValue2 ....
  #
  # Here, the output file is prefaced by the 'header', which contains the
  # the title of each line in the plot (separated by tab spaces)
  # Every subsequent line is a list of space-delimited numbers (the first
  # number being the row value, and all subsequent values being the corresponding
  # column value
  ns = list(ns); ns.sort()
  with open(outputFile, 'w') as f:
    headerStrs = list()
    for blockSize in blockSizes:
      headerStrs.append("blockSize=%d (Unblocked)" % blockSize)
      headerStrs.append("blockSize=%d (Blocked)" % blockSize)
      headerStrs.append("blockSize=%d (Transposed)" % blockSize)
    f.write("#\t%s\n" % "\t".join(headerStrs))
    for n in ns:
      f.write("%.2f" % n)
      for blockSize in blockSizes:
        f.write(" %.2f" % (sum(unblockedTimes[blockSize][n]) / len(unblockedTimes[blockSize][n])))
        f.write(" %.2f" % (sum(blockedTimes[blockSize][n]) / len(blockedTimes[blockSize][n])))
        f.write(" %.2f" % (sum(transposedTimes[blockSize][n]) / len(transposedTimes[blockSize][n])))
      f.write("\n")


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
    description=("Produce plot of data dumped in provided data file")
  )
  parser.add_argument('-i', "--inputFile", required=True,
    help="Name of file with raw data produced by test.sh")
  parser.add_argument('-o', "--outputFile", required=True,
    help="Name of file where parsed data needs to be dumped")

  cmdLineArgs = parser.parse_args()
  optDict = vars(cmdLineArgs)

  main(optDict["inputFile"], optDict["outputFile"])
