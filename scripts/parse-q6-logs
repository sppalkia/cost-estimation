#!/usr/bin/env python
import argparse

"""Parses the raw logs produced by the ./test.sh script in this directory,
   and produces a Gnuplot input data file that can be subsequently fed into
   the `../plot-graph` script to produce a plot of the data"""

def main(inputFile, outputFile):
  # First, read the raw log from the ./test.sh script and parse out
  # times and input parameters
  branchedTimes = dict()
  noBranchedTimes = dict()
  sels = set()
  allVs = set()
  with open(inputFile, 'r') as f:
    vs, sel = None, None
    for line in f:
      if "vs" in line and "sel" in line:
        [vsStr, selStr] = line.split(", ")
        vs = int(vsStr.split("=")[1])
        sel = float(selStr.split("=")[1])
        sels.add(sel)
        allVs.add(vs)
        if vs not in branchedTimes: branchedTimes[vs] = dict()
        if vs not in noBranchedTimes: noBranchedTimes[vs] = dict()
        if sel not in branchedTimes[vs]: branchedTimes[vs][sel] = []
        if sel not in noBranchedTimes[vs]: noBranchedTimes[vs][sel] = []
      elif "Branched" in line:
        time = float(line.split()[1])
        branchedTimes[vs][sel].append(time)
      elif "No Branch" in line:
        time = float(line.split()[2])
        noBranchedTimes[vs][sel].append(time)

  # Normalize all the data.
  maximum = 0.0
  for vs in branchedTimes:
      for sel in branchedTimes[vs]:
          branchedTimes[vs][sel] = [sum(branchedTimes[vs][sel]) / len(branchedTimes[vs][sel])]
          maximum = max(maximum, branchedTimes[vs][sel][0])
  for vs in noBranchedTimes:
      for sel in noBranchedTimes[vs]:
          noBranchedTimes[vs][sel] = [sum(noBranchedTimes[vs][sel]) / len(noBranchedTimes[vs][sel])]
          maximum = max(maximum, noBranchedTimes[vs][sel][0])

  for vs in branchedTimes:
      for sel in branchedTimes[vs]:
          branchedTimes[vs][sel] = [x / float(maximum) for x in branchedTimes[vs][sel]]
  for vs in noBranchedTimes:
      for sel in noBranchedTimes[vs]:
          noBranchedTimes[vs][sel] = [x / float(maximum) for x in noBranchedTimes[vs][sel]]


  # Now, write out parsed data in the format expected by Gnuplot:
  #
  # #	<Col1 Name>	<Col2 Name> ...
  # RowValue ColValue1 ColValue2 ....
  #
  # Here, the output file is prefaced by the 'header', which contains the
  # the title of each line in the plot (separated by tab spaces)
  # Every subsequent line is a list of space-delimited numbers (the first
  # number being the row value, and all subsequent values being the corresponding
  # column value
  sels = list(sels); sels.sort()
  with open(outputFile, 'w') as f:
    headerStrs = list()
    for vs in allVs:
      headerStrs.append("Number of Vs=%d (Branched)" % vs)
      headerStrs.append("Number of Vs=%d (Not branched)" % vs)
    f.write("#\t%s\n" % "\t".join(headerStrs))
    for sel in sels:
      f.write("%.2f" % sel)
      for vs in allVs:
        f.write(" %.2f" % (sum(branchedTimes[vs][sel]) / len(branchedTimes[vs][sel])))
        f.write(" %.2f" % (sum(noBranchedTimes[vs][sel]) / len(noBranchedTimes[vs][sel])))
      f.write("\n")


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
    description=("Produce plot of data dumped in provided data file")
  )
  parser.add_argument('-i', "--inputFile", required=True,
    help="Name of file with raw data produced by test.sh")
  parser.add_argument('-o', "--outputFile", required=True,
    help="Name of file where parsed data needs to be dumped")

  cmdLineArgs = parser.parse_args()
  optDict = vars(cmdLineArgs)

  main(optDict["inputFile"], optDict["outputFile"])
