#!/usr/bin/env python
import argparse

"""Parses the raw logs produced by the ./test.sh script in this directory,
   and produces a Gnuplot input data file that can be sunsequently fed into
   the `../plot-graph` script to produce a plot of the data"""

def main(inputFile, outputFile):
  # First, read the raw log from the ./test.sh script and parse out
  # times and input parameters
  blockedTimes = dict()
  unblockedTimes = dict()
  ns = set()
  ms = set()
  ks = set()
  with open(inputFile, 'r') as f:
    n, m, k = None, None, None
    for line in f:
      if "n=" in line and "m=" in line and "k=" in line:
        [nStr, mStr, kStr, _] = line.split(", ")
        n = int(nStr.split("=")[1])
        m = int(mStr.split("=")[1])
        k = int(kStr.split("=")[1])
        ns.add(n)
        ms.add(m)
        ks.add(k)
        if n not in blockedTimes: blockedTimes[n] = dict()
        if n not in unblockedTimes: unblockedTimes[n] = dict()
        if m not in blockedTimes[n]: blockedTimes[n][m] = dict()
        if m not in unblockedTimes[n]: unblockedTimes[n][m] = dict()
        if k not in unblockedTimes[n][m]: unblockedTimes[n][m][k] = []
        if k not in blockedTimes[n][m]: blockedTimes[n][m][k] = []
      elif "Blocked" in line:
        time = float(line.split()[1])
        blockedTimes[n][m][k].append(time)
      elif "Standard" in line:
        time = float(line.split()[1])
        unblockedTimes[n][m][k].append(time)

  # Now, write out parsed data in the format expected by Gnuplot:
  #
  # #	<Col1 Name>	<Col2 Name> ...
  # RowValue ColValue1 ColValue2 ....
  #
  # Here, the output file is prefaced by the 'header', which contains the
  # the title of each line in the plot (separated by tab spaces)
  # Every sunsequent line is a list of space-delimited numbers (the first
  # number being the row value, and all sunsequent values being the corresponding
  # column value
  ns = list(ns); ns.sort()
  ms = list(ms); ms.sort()
  ks = list(ks); ks.sort()

  # Just look at the n with the most iterations for now.
  n = ns[-1]

  with open(outputFile, 'w') as f:
    headerStrs = list()
    for m in ms:
      headerStrs.append("dim=%d n=%d (Standard)" % (m, n))
      headerStrs.append("dim=%d n=%d (Blocked)" % (m, n))
    f.write("#\t%s\n" % "\t".join(headerStrs))
    for k in ks:
      f.write("%d" % k)
      for m in ms:
        f.write(" %.6f" % (sum(unblockedTimes[n][m][k]) / len(unblockedTimes[n][m][k])))
        f.write(" %.6f" % (sum(blockedTimes[n][m][k]) / len(blockedTimes[n][m][k])))
      f.write("\n")

if __name__ == '__main__':
  parser = argparse.ArgumentParser(
    description=("Produce plot of data dumped in provided data file")
  )
  parser.add_argument('-i', "--inputFile", required=True,
    help="Name of file with raw data produced by test.sh")
  parser.add_argument('-o', "--outputFile", required=True,
    help="Name of file where parsed data needs to be dumped")

  cmdLineArgs = parser.parse_args()
  optDict = vars(cmdLineArgs)

  main(optDict["inputFile"], optDict["outputFile"])
