#!/usr/bin/env python
import argparse

"""Parses the raw logs produced by the ./test.sh script in this directory,
   and produces a Gnuplot input data file that can be subsequently fed into
   the `../plot-graph` script to produce a plot of the data"""

def main(inputFile, outputFile):
  # First, read the raw log from the ./test.sh script and parse out
  # times and input parameters
  queryTimes = dict()
  bs = set()
  ps = set()
  with open(inputFile, 'r') as f:
    b, p = None, None
    for line in f:
      if "b=" in line and "p=" in line:
        [_, bStr, pStr] = line.split(", ")
        b = int(bStr.split("=")[1])
        p = float(pStr.split("=")[1])
        bs.add(b)
        ps.add(p)

        if b not in queryTimes: queryTimes[b] = dict()
        if p not in queryTimes[b]: queryTimes[b][p] = []
      elif "Result" in line:
        time = float(line.split()[1])
        queryTimes[b][p].append(time)

  # Normalize all the data.
  maximum = 0.0
  for k in queryTimes:
      for n in queryTimes[k]:
          queryTimes[k][n] = [sum(queryTimes[k][n]) / len(queryTimes[k][n])]
          maximum = max(maximum, queryTimes[k][n][0])

  for k in queryTimes:
      for n in queryTimes[k]:
          queryTimes[k][n] = [x / float(maximum) for x in queryTimes[k][n]]

  # Now, write out parsed data in the format expected by Gnuplot:
  #
  # #	<Col1 Name>	<Col2 Name> ...
  # RowValue ColValue1 ColValue2 ....
  #
  # Here, the output file is prefaced by the 'header', which contains the
  # the title of each line in the plot (separated by tab spaces)
  # Every subsequent line is a list of space-delimited numbers (the first
  # number being the row value, and all subsequent values being the corresponding
  # column value
  bs = list(bs); bs.sort()
  with open(outputFile, 'w') as f:
    headerStrs = list()
    for p in ps:
      headerStrs.append("p=%.2f (Branch Prob.)" % p)
    f.write("#\t%s\n" % "\t".join(headerStrs))
    for k in bs:
      f.write("%.2f" % k)
      for p in ps:
        f.write(" %.2f" % (sum(queryTimes[k][p]) / len(queryTimes[k][p])))
      f.write("\n")


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
    description=("Produce plot of data dumped in provided data file")
  )
  parser.add_argument('-i', "--inputFile", required=True,
    help="Name of file with raw data produced by test.sh")
  parser.add_argument('-o', "--outputFile", required=True,
    help="Name of file where parsed data needs to be dumped")

  cmdLineArgs = parser.parse_args()
  optDict = vars(cmdLineArgs)

  main(optDict["inputFile"], optDict["outputFile"])
